{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","menuButton","marginRight","spacing","toolbar","mixins","drawerPaper","color","backgroundColor","content","flexGrow","padding","App","props","window","classes","useTheme","React","useState","mobileOpen","setMobileOpen","handleDrawerToggle","menu","title","icon","Info","style","Work","School","Grade","Favorite","GitHub","className","List","map","index","ListItem","button","key","ListItemIcon","ListItemText","primary","container","undefined","document","body","Hidden","smUp","implementation","CssBaseline","AppBar","position","Toolbar","IconButton","aria-label","edge","onClick","Menu","Drawer","variant","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","href","Typography","paragraph","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b2aae93a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Info, Menu, Work, School, Grade, Favorite, GitHub } from '@material-ui/icons';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport './App.css'\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    }\n  },\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n    backgroundColor: \"#1976d2\"\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n    color: \"#ffffff\",\n    backgroundColor: \"#2196f3\"\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction App(props) {\n  const { window } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const menu = [\n    {title: 'About', icon: <Info style={{ color: \"#fff\" }} />},\n    {title: 'Experience', icon: <Work style={{ color: \"#fff\" }} /> },\n    {title: 'Education', icon: <School style={{ color: \"#fff\" }} />},\n    {title: 'Skills', icon: <Grade style={{ color: \"#fff\" }} />},\n    {title: 'Interests', icon: <Favorite style={{ color: \"#fff\" }} />},\n    {title: 'Github Project', icon: <GitHub style={{ color: \"#fff\" }} /> }\n  ];\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <List>\n        {menu.map(({title, icon}, index) => (\n          <ListItem button key={title}>\n            <ListItemIcon>{icon}</ListItemIcon>\n            <ListItemText primary={title} />\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n\n  const container = window !== undefined ? () => window().document.body : undefined;\n\n  return (\n    <div className={classes.root}>\n      <Hidden smUp implementation=\"css\">\n        <CssBaseline />\n        <AppBar position=\"fixed\" className={classes.appBar}>\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              edge=\"start\"\n              onClick={handleDrawerToggle}\n              className={classes.menuButton}\n            >\n              <Menu />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n      </Hidden>\n\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <h2>Angelo <span className=\"text-primary\">Zappi</span></h2>\n        <div className=\"subheading mb-5\">Italy · <a title=\"email\" href=\"mailto:name@email.com\">name@email.com</a>\n        </div>\n        <Typography paragraph>\n        Hi! I'm Angelo – a software architect with a strong passion for the web application development.<br />\n        I'm part of many communities in order to talk with the other developers about technologies, programming languages and frameworks.\n        </Typography>\n\n      </main>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window: PropTypes.func,\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}